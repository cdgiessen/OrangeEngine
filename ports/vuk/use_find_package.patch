diff --git a/CMakeLists.txt b/CMakeLists.txt
index 34f77e1..8d51e27 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -4,11 +4,12 @@ project(vuk LANGUAGES CXX)
 include(ExternalProject)
 include(FetchContent)
 
-set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})
+list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
 
 set_property(GLOBAL PROPERTY USE_FOLDERS ON)
 
-add_library(vuk)
+add_library(vuk STATIC)
+add_library(vuk::vuk ALIAS vuk)
 
 option(VUK_BUILD_EXAMPLES "Build examples" OFF)
 option(VUK_BUILD_BENCHMARKS "Build benchmarks" OFF)
@@ -65,25 +66,25 @@ endif()
 
 target_compile_definitions(vuk PUBLIC VUK_USE_SHADERC=$<BOOL:${VUK_USE_SHADERC}> VUK_USE_DXC=$<BOOL:${VUK_USE_DXC}> VUK_BUILD_TESTS=$<BOOL:${VUK_BUILD_TESTS}> VUK_FAIL_FAST=$<BOOL:${VUK_FAIL_FAST}>)
 
-set(SPIRV_CROSS_CLI OFF CACHE BOOL "")
-set(SPIRV_CROSS_ENABLE_TESTS OFF CACHE BOOL "")
-set(SPIRV_CROSS_ENABLE_HLSL OFF CACHE BOOL "")
-set(SPIRV_CROSS_ENABLE_MSL OFF CACHE BOOL "")
-set(SPIRV_CROSS_ENABLE_CPP OFF CACHE BOOL "")
-set(SPIRV_CROSS_ENABLE_REFLECT OFF CACHE BOOL "")
-set(SPIRV_CROSS_ENABLE_C_API OFF CACHE BOOL "")
-set(SPIRV_CROSS_ENABLE_UTIL OFF CACHE BOOL "")
+find_package(vuk-vma CONFIG REQUIRED)
+find_package(unofficial-concurrentqueue CONFIG REQUIRED)
+find_package(doctest CONFIG REQUIRED)
+find_package(fmt CONFIG REQUIRED)
+find_package(imgui CONFIG REQUIRED)
+find_package(robin_hood CONFIG REQUIRED)
+find_package(spirv_cross_core REQUIRED)
+# find_package(stb CONFIG REQUIRED)
 
-add_subdirectory(ext/SPIRV-Cross)
 
 # we don't enable this directly, because the order of flags disables /Zc:char8_t- on MSVC
 #target_compile_features(vuk PUBLIC cxx_std_20)
 
-target_sources(vuk PRIVATE 
+file(GLOB_RECURSE VUK_HEADERS CONFIGURE_DEPENDS ${CMAKE_CURRENT_LIST_DIR}/include/*)
+target_sources(vuk PRIVATE
 	src/Pipeline.cpp
 	src/Program.cpp
 	src/Cache.cpp
-	src/RenderGraph.cpp 
+	src/RenderGraph.cpp
 	src/RenderGraphUtil.cpp
 	src/ExecutableRenderGraph.cpp
 	src/Allocator.cpp
@@ -92,18 +93,17 @@ target_sources(vuk PRIVATE
 	src/Descriptor.cpp
 	src/Util.cpp
 	src/Format.cpp
-	src/Name.cpp 
+	src/Name.cpp
 	src/DeviceFrameResource.cpp
-	src/DeviceVkResource.cpp)
+	src/DeviceVkResource.cpp
+    ${VUK_HEADERS})
+set_property(TARGET vuk
+    PROPERTY PUBLIC_HEADER ${VUK_HEADERS})
 
-target_include_directories(vuk PUBLIC ext/plf_colony)
-if (NOT TARGET VulkanMemoryAllocator)
-	add_subdirectory(ext/VulkanMemoryAllocator)
-endif()
-add_subdirectory(ext/robin-hood-hashing)
-add_subdirectory(ext/fmt)
-target_include_directories(vuk PRIVATE ext/concurrentqueue)
-target_include_directories(vuk PUBLIC include)
+target_include_directories(vuk PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+  $<INSTALL_INTERFACE:include>
+)
 
 string(FIND "${CMAKE_CXX_COMPILER}" "clang++" VUK_COMPILER_CLANGPP)
 if(VUK_COMPILER_CLANGPP GREATER -1)
@@ -136,12 +136,18 @@ if(VUK_COMPILER_CLANGPP OR VUK_COMPILER_CLANGCL)
 	 target_compile_options(vuk PRIVATE -Wno-nullability-completeness)
 endif()
 
-target_link_libraries(vuk PRIVATE spirv-cross-core robin_hood VulkanMemoryAllocator fmt::fmt)
+target_link_libraries(vuk PRIVATE
+    Vulkan::Vulkan
+    spirv-cross-core
+    robin_hood
+    fmt::fmt
+    # unofficial::concurrentqueue::concurrentqueue
+    VulkanMemoryAllocator
+    )
 
 if(VUK_LINK_TO_LOADER)
 	if (VUK_USE_VULKAN_SDK)
-		target_include_directories(vuk PUBLIC ${Vulkan_INCLUDE_DIRS})
-		target_link_libraries(vuk PRIVATE ${Vulkan_LIBRARIES})
+        target_link_libraries(vuk PRIVATE Vulkan::Vulkan)
 	else()
 		target_link_libraries(vuk PRIVATE vulkan)
 	endif()
@@ -164,13 +170,12 @@ if(VUK_BUILD_DOCS)
 endif()
 
 
-add_subdirectory(ext/doctest)
-target_link_libraries(vuk PUBLIC doctest::doctest)
-target_sources(vuk PRIVATE src/tests/Test.cpp)
+# target_link_libraries(vuk PUBLIC doctest::doctest)
+# target_sources(vuk PRIVATE src/tests/Test.cpp)
 
 if(VUK_BUILD_TESTS)
 	FetchContent_Declare(
-	  vk-bootstrap 
+	  vk-bootstrap
 	  GIT_REPOSITORY https://github.com/charles-lunarg/vk-bootstrap
 	  GIT_TAG        cf8df11a0a071463009031cb474099dacffe90ed
 	)
@@ -195,3 +200,35 @@ if(VUK_BUILD_TESTS)
 else()
 	target_compile_definitions(vuk PRIVATE DOCTEST_CONFIG_DISABLE)
 endif()
+
+include(GNUInstallDirs)
+# include(CMakePackageConfigHelpers)
+
+# Install library target and add it and any dependencies to export set.
+install(TARGETS vuk
+    EXPORT vukConfig
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+)
+
+install(EXPORT vukConfig DESTINATION ${CMAKE_INSTALL_DATADIR}/vuk NAMESPACE "vuk::" FILE vukConfig.cmake)
+
+# install(FILES ${CMAKE_CURRENT_BINARY_DIR}/vukConfig.cmake DESTINATION ${CMAKE_INSTALL_DATADIR})
+
+# Install Headers
+install(DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/include/vuk" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+
+# export(TARGETS
+#         vuk
+#     NAMESPACE vuk::
+#     FILE vukConfig.cmake
+# )
+
+# install(EXPORT vukConfig
+#     DESTINATION ${cmake_files_install_dir}
+#     NAMESPACE vuk::
+# )
+
+
diff --git a/include/vuk/Image.hpp b/include/vuk/Image.hpp
index f3b69f3..17211f1 100644
--- a/include/vuk/Image.hpp
+++ b/include/vuk/Image.hpp
@@ -2,7 +2,14 @@
 
 #include <cassert>
 
-#include "../src/CreateInfo.hpp"
+namespace vuk {
+	template<class T>
+	struct create_info;
+
+	template<class T>
+	using create_info_t = typename create_info<T>::type;
+} // namespace vuk
+
 #include "Types.hpp"
 
 namespace vuk {
@@ -360,9 +367,11 @@ namespace vuk {
 			ivci.components.g = (ComponentSwizzle)g_swizzle;
 			ivci.components.b = (ComponentSwizzle)b_swizzle;
 			ivci.components.a = (ComponentSwizzle)a_swizzle;
-			ivci.subresourceRange = {
-				.aspectMask = (ImageAspectFlags)aspectMask, .baseMipLevel = baseMipLevel, .levelCount = levelCount, .baseArrayLayer = baseArrayLayer, .layerCount = layerCount
-			};
+			ivci.subresourceRange = { .aspectMask = (ImageAspectFlags)aspectMask,
+				                        .baseMipLevel = baseMipLevel,
+				                        .levelCount = levelCount,
+				                        .baseArrayLayer = baseArrayLayer,
+				                        .layerCount = layerCount };
 			ivci.image = image;
 			ivci.format = (Format)format;
 			return ivci;
diff --git a/src/Allocator.cpp b/src/Allocator.cpp
index 6ddce26..1446e26 100644
--- a/src/Allocator.cpp
+++ b/src/Allocator.cpp
@@ -1,3 +1,4 @@
+#define VMA_IMPLEMENTATION
 #include "vuk/Allocator.hpp"
 #include "LegacyGPUAllocator.hpp"
 #include "RenderPass.hpp"
diff --git a/src/Descriptor.cpp b/src/Descriptor.cpp
index 75164de..a7b433a 100644
--- a/src/Descriptor.cpp
+++ b/src/Descriptor.cpp
@@ -1,7 +1,7 @@
 #include "vuk/Descriptor.hpp"
 #include "vuk/Context.hpp"
 
-#include <concurrentqueue.h>
+#include <concurrentqueue/concurrentqueue.h>
 #include <mutex>
 #include <robin_hood.h>
 
@@ -93,4 +93,4 @@ namespace vuk {
 		}
 		return final;
 	}
-} // namespace vuk
\ No newline at end of file
+} // namespace vuk
diff --git a/src/LegacyGPUAllocator.hpp b/src/LegacyGPUAllocator.hpp
index 4b44d1f..096a72c 100644
--- a/src/LegacyGPUAllocator.hpp
+++ b/src/LegacyGPUAllocator.hpp
@@ -16,7 +16,7 @@
 #include <unordered_map>
 #include <utility>
 #include <vector>
-#include <vk_mem_alloc.h>
+#include <vuk_vk_mem_alloc.h>
 
 namespace vuk {
 	struct PoolSelect {
